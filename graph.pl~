#!/usr/bin/perl
use Cwd qw();


   #Author1: Fred Aklamanu (fred.aklamanu@telecom-sudparis.eu) 
   #Author2: Saurabh Sharma (saurabh.sharma@telecom-sudparis.eu)
   #Date:    09/06/2015
   #Version : 5.0 
   #Course:  CSC 7201 (Computing Project)
   #Description: This is the Perl script used to generate the graph for each function in the program using Graphviz .dot format.
   #The script reads the preorder traversal of the tree generated by yacc and creates dot files which are further coverted to png files
   #This script also used to run the whole project as one including Lex and Yacc
   # 
   ##

my $path = Cwd::cwd(); ##stores the path of current directory
my@remove=`rm -f $path/*.txt`;
print "Enter The Assembly filename (*.s) to create the graph\n";
$result = <STDIN>; #stores standard input
chomp($result);
`rm -rf $result`;
`mkdir $result`;
`mkdir $result/dot`;
`mkdir $result/png`;
#`mkdir $result/functions`;

`yacc yacc.y 2>garbage.txt`; #compile lex to generate y.tab.c
`lex lex.l > garbage.txt`; #compile lex to generate lex.yy.c
`cc lex.yy.c  y.tab.c -ly -ll 2> garbage.txt`; #generates a.out
@output=`./a.out < $result.s`; #excution of a.out

$i=0;

#Below is the loop to generate the Graph code
for $output(@output)
{
$output=~ tr/\t/ /d; #removes extra tabs
$output=~ tr/ \t//d;
@fraction=split(",",$output); #split the output using delimiter
#printf "$output\n";
chomp($output);
chomp(@fraction);
if($fraction[1] =~/label/i) 
{
$filename=$fraction[0];
chomp($filename);
open(GRAPH,">$path/$result/dot/$fraction[0].dot") or die "Cannot create file"; #initiate the creation of a new dot file when a label is found
print GRAPH "digraph G {\n";
$i++;
}
if (($fraction[0] !~ /RET/i) && ($fraction[2]!~/label/i)) #check until return is found
{
if($fraction[1] =~/label/i)
{
print GRAPH "\"$fraction[0]\" [peripheries=2,color=red]\;\n"; #creation of main function vertex
print GRAPH "\"$fraction[0]\" -> \"$fraction[2]\"\;\n";
}
if (($fraction[2] !=0)&& ($output !~ /Cjump/i)&& ($output !~ /Ujump/i)&&($output !~ /CJL/i)&&($output !~ /UJL/i)&&($output !~ /RET/i))
{
print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\" [label=\"$fraction[2]\"]\;\n"; #creation of vertex and edge with weights
}
if (($fraction[2] ==0)&& ($output !~ /Cjump/i)&& ($output !~ /Ujump/i)&& ($output !~ /Ujump/i)&&($output !~ /CJL/i)&&($output !~ /UJL/i)&&($output !~ /label/i)&&($output !~ /RET/i))
{
print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"\;\n"; #creation of vertex and edge without weights
}

if(($fraction[1] =~/Cjump/i)) #creation of vertex and edge from any general label to a conditionaljump
{
print GRAPH "\"$fraction[1]\" [shape=point,fixedsize=true,color=black,width=.3,height=.3,style=filled]\;\n"; #creation of Cjump vertex
 if ($fraction[2] !=0) #check for number of cycles as the weight of the graph
              {
	      print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"  [label=\"$fraction[2]\"]\;\n"; #creation of vertex and edge with weights
	      }
	    else
	    {
             print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"\;\n";#creation of vertex and edge without weights
	      }
}
if(($fraction[2] =~/CJL/i)) #creation of first link from conditionaljump to further
{
 print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"\;\n";
}
if ($fraction[1] =~/CJL/i) #creation of second link from conditionaljump to further
{
 $x=chop($fraction[1]);
$fraction[0]="Cjump$x"; #name of the vertex is made equal to the previous one for the efficient creation of graph
            if ($fraction[3] !=0) #check for number of cycles as the weight of the graph
              {
	      print GRAPH "\"$fraction[0]\" -> \"$fraction[2]\"  [label=\"$fraction[3]\"]\;\n"; #creation of vertex and edge with weights
	      }
	    else
	    {
             print GRAPH "\"$fraction[0]\" -> \"$fraction[2]\"\;\n"; #creation of vertex and edge without weights
	      }
}

if(($fraction[1] =~/Ujump/i)) #creation of vertex and edge from any general label to a unconditionaljump
{
  
    if ($fraction[2] !=0) #check for number of cycles as the weight of the graph
              {
	      print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"  [label=\"$fraction[2]\"]\;\n"; #creation of vertex and edge with weights
	      }
	    else
	    {
             print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"\;\n";#creation of vertex and edge without weights
	      }
}

if(($fraction[2] =~/UJL/i)) #creation of only link from unconditionaljump to further
{
 print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"\;\n"; #creation of edge from Ujump to further
}
if(($fraction[1] =~/RET/i))
{
print GRAPH "\"$fraction[1]\" [peripheries=2,color=red]\;\n"; #creation of Ret with double pheripheries vertex
    if ($fraction[2] !=0) #check for number of cycles as the weight of the graph
              {
	      print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"  [label=\"$fraction[2]\"]\;\n";#creation of vertex and edge with weights
	      }
	    else
	    {
             print GRAPH "\"$fraction[0]\" -> \"$fraction[1]\"\;\n";#creation of vertex and edge without weights
	      }
}

}

if ($fraction[0] =~ /call/i) #check to rename all function calls (ex printf1, printf2 as printf) 
{
$l=$fraction[0];
chop($fraction[0]);
$fraction[0] =~ s/call//g; #remove call
print GRAPH "\"$l\" [label=\"$fraction[0]\",shape=rectangle]\;\n"; #creation of vertex for function calls

}

if ($fraction[0] =~ /Ujump/i)
{
$l=$fraction[0];
chop($fraction[0]);
print GRAPH "\"$l\" [label=\"$fraction[0]\",shape=point]\;\n"; #creation of vertex for Uncond jumps

}
if ($fraction[0] =~ /RET/i) #check for the end of the dot file
{
print GRAPH "}\n";
close GRAPH; #close the file when the return is found
`cd $path/$result/dot ; dot -Tpng $filename.dot -o $path/$result/png/$filename.png`; #creation of png files
}
}
my@remove=`$path/$result/fname.txt`;
print "Your Graphs(.png) are ready in the folder $path/$result/png\n";
print "********************************\n";
print "Have a great day !\n";
print "********************************\n";














